# ======================================================================================
#  __    ____  __  __  ____  ___
# (  )  (_  _)(  \/  )( ___)/ __)
#  )(__  _)(_  )    (  )__) \__ \
# (____)(____)(_/\/\_)(____)(___/
#
#  This file is part of the Limes open source library and is licensed under the terms of the GNU Public License.
#
#  Commercial licenses are available; contact the maintainers at ben.the.vining@gmail.com to inquire for details.
#
# ======================================================================================

# TODO: Python linting

# config file for pre-commit: https://pre-commit.com/
#
# These plugins are run before each git commit, but can also be run on demand using:
# `pre-commit run --all-files`
#
# To install the hooks to be automatically run by git when committing, run:
# `pre-commit install --install-hooks`
#
# This is the preferred way to run all of these tools -- clang-format, clang-tidy,
# cppcheck, cmake-format, etc -- because it is convenient to define configuration
# for all of them in this single file, and to define the order in which they should
# be run (we always auto-format *before* linting). In general, any tools that are
# available as pre-commit plugins are run using pre-commit, and for these tools, any
# configuration options settable as command-line arguments are specified in this file
# using the `args:` key. When a tool requires configuration file(s), then if it is
# possible to specify a custom filepath, we put the config file(s) in the `config/`
# directory and specify that path as a command-line argument. Only if specifying a
# custom config file is not possible do we resort to putting it in the repo root.
#
# Note that running pre-commit may change files in the source tree. If a hook changes
# files, the pre-commit run exits with a failure code, and if a git commit was in
# progress, it is aborted.

default_language_version:
  python: python3

default_install_hook_types: [pre-commit, pre-push, commit-msg]

default_stages: [commit, push]

fail_fast: false

minimum_pre_commit_version: 2.20.0

ci:
  skip: [cppcheck, check-jsonschema] # clang-tidy
  autofix_commit_msg: 'style: pre-commit autofixes [skip ci]'
  autoupdate_commit_msg: 'chore: pre-commit autoupdate [skip ci]'

repos:

# pre-commit configuration meta-checks
- repo: meta
  hooks:
  - id: check-hooks-apply
    always_run: true
  - id: check-useless-excludes
    always_run: true

# Local scripts
- repo: local
  hooks:
    # create logs directory
    # if a hook with a log file specified fails, the logs directory must exist or another error will be thrown
  - id: logs-dir
    name: Create logs directory
    entry: cmake -E make_directory logs/pre-commit
    language: system
    always_run: true
    pass_filenames: false

    # only .json files allowed in cmake/presets/
  - id: json-xtn-in-toolchain-dir
    name: Ensure only .json files in cmake/presets/
    entry: Files in the cmake/presets/ directory must have the .json extension
    language: fail
    files: cmake/presets/.*(?<!\.json)$

# Insert license header
- repo: https://github.com/Lucas-C/pre-commit-hooks
  rev: v1.5.1
  hooks:
  - id: insert-license
    name: Insert license header in CMake and shell files
    args: [--license-filepath=config/limes_header.txt, --comment-style=#, --detect-license-in-X-top-lines=16]
    types_or: [cmake, shell, python, yaml, toml, ini]
  - id: insert-license
    name: Insert license header in other config files
    args: [--license-filepath=config/limes_header.txt, --comment-style=#, --detect-license-in-X-top-lines=16]
    files: .envrc|.tool-versions|.bumpversion.cfg|.editorconfig|.gitignore|.gitattributes|.clang-format|.clang-tidy|.pre-commit-config.yaml
  - id: insert-license
    name: Insert license header in Batch files
    args: [--license-filepath=config/limes_header.txt, '--comment-style=::', --detect-license-in-X-top-lines=16]
    files: .bat

# CMake formatting & linting
- repo: https://github.com/cheshirekow/cmake-format-precommit
  rev: v0.6.13
  hooks:
  - id: cmake-format
    args: [--config-files, config/.cmake-format.json, --in-place]
  - id: cmake-lint
    args: [--config-files, config/.cmake-format.json, --disabled-codes, E1120]
    log_file: logs/pre-commit/cmake-lint.log

# Bash formatting & linting
- repo: https://github.com/lovesegfault/beautysh
  rev: v6.2.1
  hooks:
  - id: beautysh
    args: [--tab]
- repo: https://github.com/shellcheck-py/shellcheck-py
  rev: v0.9.0.5
  hooks:
  - id: shellcheck
    args: [--color=always, --shell=bash]

# Python formatting & linting
- repo: https://github.com/pylint-dev/pylint
  rev: v2.17.4
  hooks:
  - id: pylint
    args: ["--disable=line-too-long,import-error,too-few-public-methods,invalid-name", "--ignore=conf.py,colors.py"]

# General
- repo: https://github.com/pre-commit/pre-commit-hooks
  rev: v4.4.0
  hooks:
  - id: check-added-large-files
    args: [--maxkb=64]
  - id: check-ast
  - id: check-builtin-literals
  - id: check-docstring-first
  - id: check-case-conflict
  - id: check-executables-have-shebangs
  - id: check-shebang-scripts-are-executable
  - id: check-json
  - id: check-merge-conflict
  - id: check-shebang-scripts-are-executable
  - id: check-vcs-permalinks
  - id: check-yaml
  - id: destroyed-symlinks
  - id: detect-private-key
  - id: double-quote-string-fixer
  - id: end-of-file-fixer
  - id: fix-byte-order-marker
  - id: fix-encoding-pragma
  - id: forbid-submodules
  - id: mixed-line-ending
    args: [--fix=lf]
  - id: pretty-format-json
    args: [--autofix, --indent=2]
  - id: trailing-whitespace
    args: [--markdown-linebreak-ext=md]

- repo: https://github.com/pre-commit/pygrep-hooks
  rev: v1.10.0
  hooks:
  - id: rst-backticks
  - id: rst-directive-colons
  - id: rst-inline-touching-normal

  # text file linters
- repo: https://github.com/sirosen/texthooks
  rev: 0.5.0
  hooks:
  - id: fix-ligatures
  - id: fix-smartquotes
  - id: forbid-bidi-controls
  # Markdown
- repo: https://github.com/igorshubovych/markdownlint-cli
  rev: v0.35.0
  hooks:
  - id: markdownlint-fix
    args: [--disable, MD033, MD010, MD013]
    # exclude: CHANGELOG.md
- repo: https://github.com/codingjoe/relint
  rev: 3.1.0
  hooks:
  - id: relint
    args: [-c, config/.relint.yml]
    exclude: config/.relint.yml
    log_file: logs/pre-commit/relint.log
    verbose: true

  # various other formatters
- repo: https://github.com/macisamuele/language-formatters-pre-commit-hooks.git
  rev: v2.9.0
  hooks:
  - id: pretty-format-ini
    args: [--autofix]
  - id: pretty-format-yaml
    args: [--autofix, --preserve-quotes]

  # validate JSON/YAML schemas
- repo: https://github.com/sirosen/check-jsonschema
  rev: 0.23.2
  hooks:
  - id: check-jsonschema
    name: Validate CMake presets
    args: [--schemafile, 'https://cmake.org/cmake/help/latest/_downloads/3e2d73bff478d88a7de0de736ba5e361/schema.json']
    files: CMakePresets.json|cmake/presets/
    types: [json]

# Git linting
- repo: https://github.com/jorisroovers/gitlint
  rev: v0.19.1
  hooks:
  - id: gitlint
    args: [--config, config/.gitlint, --msg-filename]
    always_run: true
- repo: https://github.com/jumanjihouse/pre-commit-hooks.git
  rev: 3.0.0
  hooks:
  - id: check-mailmap
  - id: git-check

# check editorconfig rules
- repo: https://github.com/editorconfig-checker/editorconfig-checker.python
  rev: 2.7.2
  hooks:
  - id: editorconfig-checker
    args: [-config, config/.ecrc]

# sign commit
- repo: https://github.com/mattlqx/pre-commit-sign
  rev: v1.1.3
  hooks:
  - id: sign-commit
